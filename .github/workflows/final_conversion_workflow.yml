# .github/workflows/final_conversion_workflow.yml
name: Final Conversion Workflow

on:
  push:
    paths:
      - 'conversation/csv/version.txt'

jobs:
  run_final_conversion:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository and ensure latest
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0 # Fetch all history

      - name: Log Final Conversion Workflow Start
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Ensure token is available
        run: |
          mkdir -p conversation/Logs # Changed folder name
          LOG_FILE="conversation/Logs/workflow_activity.log"
          echo "$(date +"%Y-%m-%d %H:%M:%S") - Final conversion workflow triggered by version.txt." >> "$LOG_FILE"
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          git add "$LOG_FILE"
          # Pull latest changes before committing. This is crucial for logs as other workflows might update them.
          git pull --rebase origin main || true
          
          if ! git diff --staged --quiet; then
              git commit -m "Log: Final workflow triggered."
          else
              echo "No new log entry commit from final workflow trigger."
          fi
          
          git push --force-with-lease || echo "Log push failed for final workflow trigger."


      - name: Verify scanning.xlsx and version.txt exist
        id: check_files
        run: |
          SCANNING_FILE="conversation/csv/scanning.xlsx"
          VERSION_FILE="conversation/csv/version.txt"
          
          if [ ! -f "$SCANNING_FILE" ]; then
            echo "Error: scanning.xlsx not found. Aborting final conversion."
            exit 1
          fi
          if [ ! -f "$VERSION_FILE" ]; then
            echo "Error: version.txt not found. Aborting final conversion."
            exit 1
          fi
          echo "Both scanning.xlsx and version.txt found. Proceeding with final conversion."
          echo "files_exist=true" >> "$GITHUB_OUTPUT"

      - name: Set up Python for Final Conversion
        if: steps.check_files.outputs.files_exist == 'true'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Required Python Packages for Final Conversion
        if: steps.check_files.outputs.files_exist == 'true'
        run: pip install pandas openpyxl sqlite-utils

      - name: Run Final Conversion (CSV to DB, Zip) and Reset Log
        if: steps.check_files.outputs.files_exist == 'true'
        run: |
          python3 <<EOF
          import pandas as pd
          import sqlite3
          import os
          from datetime import datetime
          import zipfile
          import traceback
          import sys

          try:
              scanning_file_path = "conversation/csv/scanning.xlsx"
              version_file_path = "conversation/csv/version.txt"
              log_path = "conversation/Logs/workflow_activity.log"
              
              os.makedirs("conversation/Ready", exist_ok=True)
              os.makedirs("conversation/Logs", exist_ok=True)

              with open(version_file_path, 'r') as f:
                  version_name = f.read().strip()

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} Final Conversion Started for version: {version_name}.\n")

              df = pd.read_excel(scanning_file_path)

              if "OriginalPrice" in df.columns:
                  df["OriginalPrice"] = pd.to_numeric(df["OriginalPrice"], errors='coerce')
                  def format_price(price):
                      if pd.isna(price):
                          return ''
                      elif isinstance(price, (int, float)) and price == int(price):
                          return str(int(price))
                      else:
                          return str(price)
                  df["OriginalPrice"] = df["OriginalPrice"].apply(format_price)

              final_columns = ["Barcode", "Article", "Percentage", "OriginalPrice"]
              # Ensure all columns exist before selecting, handle missing columns if necessary
              # For now, assuming these columns will always be present in scanning.xlsx
              df = df[final_columns]

              db_target = f"conversation/Ready/{version_name}.db"
              conn = sqlite3.connect(db_target)
              df.to_sql("sc", conn, if_exists="replace", index=False, dtype={'OriginalPrice': 'TEXT'})
              conn.commit()
              conn.execute("VACUUM;")
              conn.close()

              with sqlite3.connect(db_target) as conn:
                  conn.execute("CREATE TABLE IF NOT EXISTS databaseversion (DBversion TEXT)")
                  conn.execute("DELETE FROM databaseversion")
                  conn.execute("INSERT INTO databaseversion (DBversion) VALUES (?)", (version_name,))
                  conn.commit()
                  conn.execute("VACUUM;")

              zip_name = f"conversation/Ready/{version_name}.zip"
              with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zipf:
                  zipf.write(db_target, os.path.basename(db_target))

              os.remove(db_target)

              with open(log_path, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} DB conversion and zipping complete. Final ZIP created: {os.path.basename(zip_name)}.\n")
                  logfile.write(f"{now} Workflow Finished.\n")

              # Reset the log file by truncating it
              with open(log_path, "w") as logfile:
                  logfile.write("")
              
          except Exception as e:
              log_path_error = "conversation/Logs/workflow_activity.log"
              with open(log_path_error, "a") as logfile:
                  now = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                  logfile.write(f"{now} ERROR: Final Conversion Failed: {str(e)}\n")
                  logfile.write(traceback.format_exc())
              sys.exit(1)
          EOF
        env:
          PYTHONUNBUFFERED: 1

      - name: Clean Up Source Files and Commit Finalized Files
        if: steps.check_files.outputs.files_exist == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config user.name "github-actions"
          git config user.email "actions@github.com"
          
          # Add the newly created finalized ZIP file and the now-empty log file
          git add conversation/Ready/*.zip
          git add conversation/Logs/workflow_activity.log # Now empty or fresh
          
          # Remove source files
          git rm conversation/csv/scanning.xlsx || true
          git rm conversation/csv/version.txt || true
          
          if git diff --staged --quiet; then
              echo "No changes to commit from this final step."
          else
              git commit -m "Finalized: Created ZIP, cleaned up source files, and reset log."
          fi
          
          # Use --force to ensure the push goes through despite potential race conditions
          git push --force
